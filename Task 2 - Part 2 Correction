{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Task 2 - Part 2 Correction","provenance":[{"file_id":"1TU9kAOWEPV9WilJuasdwGpm49zGH9wXh","timestamp":1635004638288}],"collapsed_sections":[],"authorship_tag":"ABX9TyNyKG8M8uqMQ7A6Mv9yg6rX"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"iZiBb1VSx4H5","executionInfo":{"status":"ok","timestamp":1636123929171,"user_tz":-180,"elapsed":452,"user":{"displayName":"Ashish T Shivakumar Ireddy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgRJ9Hs72-OthSW0fiMcacnPbFVU5GvCjBJcPEo=s64","userId":"05364880370093993344"}}},"source":["import time \n","import numpy as np\n","import matplotlib.pyplot as plt\n","import math\n","import sys\n","from scipy import optimize\n","from random import random\n","from scipy.optimize import minimize"],"execution_count":107,"outputs":[]},{"cell_type":"code","metadata":{"id":"sw5uKl_CQXUu","executionInfo":{"status":"ok","timestamp":1636123929643,"user_tz":-180,"elapsed":33,"user":{"displayName":"Ashish T Shivakumar Ireddy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgRJ9Hs72-OthSW0fiMcacnPbFVU5GvCjBJcPEo=s64","userId":"05364880370093993344"}}},"source":["#Initialization \n","#------------------------------------------------------------------------------\n","x = np.zeros((101)) # X values\n","y = np.zeros((101)) # Y values\n","g = np.zeros((101)) # Detla\n","\n","\n","alpha = random()\n","beta = random()\n","\n","\n","for k in range(100): # Geneartion of Noise \n","  g[k] = np.random.normal(0, 1)\n","  x[k] = k/100\n","  y[k] = (alpha*x[k]) + beta + g[k]\n","\n","#------------------------------------------------------------------------------\n","#Linear Function\n","def Linear(xx,l1,l2):\n","  ans1 = l1*xx + l2\n","  return ans1\n","\n","#Rational Function\n","def Rational(xx,r1,r2):\n","  ans2 = (r1)/(1+r2*xx)\n","  return ans2\n","#------------------------------------------------------------------------------\n","#Sum\n","def LSMLinear(ll1,ll2):\n","  ans3=0\n","  for i in range(101):\n","    ans3 = ans3 + (((ll1*x[i]+ll2) -y[i])**2)\n","  return ans3\n","\n","def LSMRational(rr1,rr2):\n","  ans4 = 0\n","  for j in range(101):\n","    ans4 += (((rr1/ (x[j] * rr2+1) )- y[j]) ** 2)\n","  return ans4\n","#------------------------------------------------------------------------------\n"],"execution_count":108,"outputs":[]},{"cell_type":"code","metadata":{"id":"mp_Gif3ai0gE","executionInfo":{"status":"ok","timestamp":1636123929646,"user_tz":-180,"elapsed":33,"user":{"displayName":"Ashish T Shivakumar Ireddy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgRJ9Hs72-OthSW0fiMcacnPbFVU5GvCjBJcPEo=s64","userId":"05364880370093993344"}}},"source":["#Brute Force Method \n","#------------------------------------------------------------------------------\n","def Brute(IN):\n","  AV=float('inf')\n","  V1=np.arange(-1, 1, 0.01)\n","  V2=np.arange(-1, 1, 0.01)\n","  ctrf=0\n","  ctri=0\n","  for i in range(len(V1)):\n","    for j in range(len(V2)):\n","      ctrf+=1\n","      ctri+=1\n","      if IN(V1[i], V2[j])<AV:\n","        AV=IN(V1[i],V2[j])\n","        T1=V1[i]\n","        T2=V2[j]\n","  return AV, T1, T2, ctrf, ctri\n","#------------------------------------------------------------------------------"],"execution_count":109,"outputs":[]},{"cell_type":"code","metadata":{"id":"YDKS2TjA3LDy","executionInfo":{"status":"ok","timestamp":1636123929649,"user_tz":-180,"elapsed":34,"user":{"displayName":"Ashish T Shivakumar Ireddy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgRJ9Hs72-OthSW0fiMcacnPbFVU5GvCjBJcPEo=s64","userId":"05364880370093993344"}}},"source":["#Pre Processing Data for Gauss Method\n","#------------------------------------------------------------------------------\n","def PREGAUSS(y,a1,b1,a2, b2, b0,err):\n","  gr=(5**(0.5)+3)/2\n","  x2=b1-(b1-a1)/gr\n","  x1=a1+(b1-a1)/gr\n","  y2=b2-(b2-a2)/gr\n","  y1=a2+(b2-a2)/gr\n","\n","  i=0\n","  while abs(x2-x1)>err and abs(y2-y1)>err:\n","    if y(x1, b0)<=y(x2, b0):\n","      b1=x2\n","      x2=x1\n","    else:\n","      a1=x1\n","      x1=x2\n","    x2=b1-(b1-a1)/gr\n","    x1=a1+(b1-a1)/gr\n","    xmin=(a1+b1)/2\n","    if y(xmin, y1 )<=y(xmin, y2):\n","      b2=y2\n","      y2=y1\n","    else:\n","      a2=y1\n","      y1=y2\n","    y2=b2-(b2-a2)/gr\n","    y1=a2+(b2-a2)/gr\n","    ymin=(a2+b2)/2\n","    i+=1\n","  return xmin, ymin, i\n","#------------------------------------------------------------------------------\n","# Part 2 of Gauss method\n","\n","def REALGauss(Y, low):\n","\n","  B0 = 0.5\n","  A1, B1= 1, 1\n","  i = 0\n","  j = 0\n","\n","  while abs(Y(A1, B1)- Y(A1, B0))> low:\n","    A1 = PREGAUSS(Y, -1,1,-1,1,B0 ,0.001)[0]\n","    B0 = B1\n","    B1= PREGAUSS(Y, -1,1,-1,1,B0, 0.001)[1]\n","    j+=PREGAUSS(Y, -1,1,-1,1,B0, 0.001)[2]\n","    i+=1\n","    TEMP=abs(B1-B0)\n","\n","  return Y(A1, B1), A1, B1, i, 2*j ,TEMP\n","  #------------------------------------------------------------------------------"],"execution_count":110,"outputs":[]},{"cell_type":"code","metadata":{"id":"K9HSLkog3gNh","executionInfo":{"status":"ok","timestamp":1636123929651,"user_tz":-180,"elapsed":34,"user":{"displayName":"Ashish T Shivakumar Ireddy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgRJ9Hs72-OthSW0fiMcacnPbFVU5GvCjBJcPEo=s64","userId":"05364880370093993344"}}},"source":["# Nelder Mead Function\n","#------------------------------------------------------------------------------\n","def NelderMEAD(Y, A, B, C, low):\n","\n","  X1=np.array([0.5,0.5])\n","  X2=np.array([1,1])\n","  X3=np.array([1,0])\n","  XI=np.array([X1,X2,X3])\n","  i=0\n","\n","  while abs((X3[0]-X2[0])**2 +(X3[1]-X2[1])**2)> low and abs((X3[0]-X1[0])**2+(X3[1]-X1[1])**2)> low:\n","    XI=np.array([X1,X2,X3])\n","    YI=np.array([Y(X1[0],X1[1]), Y(X2[0],X2[1]), Y(X3[0], X3[1])])\n","    YLINE=sorted(YI)\n","    YS1=YLINE[0]\n","    XS1=XI[np.where(YI==YS1)[0][0]]\n","    YS2=YLINE[1]\n","    XS2=XI[np.where(YI==YS2)[0][0]]\n","    YS3=YLINE[2]\n","    XS3=XI[np.where(YI==YS3)[0][0]]\n","    XS4=(XS1+XS2)/2\n","    XRE = (1+A)*XS4-A*XS3\n","    YRE = Y(XRE[0], XRE[1])\n","\n","    if YRE<YS2:\n","      XS3=XRE\n","    else:\n","      if YRE < YS3:\n","        XS3=XRE\n","      XC=(XS3+XS4)/2\n","      YC=Y(XC[0], XC[1])\n","      if YC< YS3:\n","        XS3=XC\n","\n","    if YRE< YS1 :\n","      XEX= (1-C)*XS4+C*XRE\n","      YEY=Y(XEX[0], XEX[1])\n","      if YEY <YRE:\n","        XS3=XEX\n","      else:\n","        XS3=XRE\n","    if YRE> YS2:\n","      XC=B*XS3+(1-B)*XS4\n","      if YC < YS3:\n","        XS3=XC\n","\n","    i+=1\n","    X1=XS3\n","    X2=XS2\n","    X3=XS1\n","\n","  TEMP = abs((X3[0]-X2[0])**2 +(X3[1]-X2[1])**2)\n","\n","  return Y(XS1[0], XS1[1]), XS1[0], XS1[1], i, 5*i , TEMP\n","  #------------------------------------------------------------------------------"],"execution_count":111,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":431},"id":"OzPY8gca3s21","executionInfo":{"status":"ok","timestamp":1636123949539,"user_tz":-180,"elapsed":19920,"user":{"displayName":"Ashish T Shivakumar Ireddy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgRJ9Hs72-OthSW0fiMcacnPbFVU5GvCjBJcPEo=s64","userId":"05364880370093993344"}},"outputId":"323ee7c7-e90f-457d-cdc3-a686466d86ab"},"source":["#Plotting For Linear Approximation \n","\n","#------------------------------------------------------------------------------\n","# No of F-Caluclations and Iterations peroformed for least square error Linear Approximation\n","\n","print('\\n Linear Approximation')\n","print('\\n Brute Force: F-Calc = %d, Iterations = %d '%(Brute(LSMLinear)[3], Brute(LSMLinear)[4]) )\n","print('\\n Gauss Method: F -Calc = %d, Iterations = %d, Precision = %f '%(REALGauss(LSMLinear, 0.001)[4], REALGauss(LSMLinear, 0.001)[3] , REALGauss(LSMLinear, 0.001)[5]) )\n","print('\\n Nelder Mead Method : F -Calc = %d, Iterations = %d, Precision = %f'%(NelderMEAD(LSMLinear, 1, 0.5, 2, 0.001)[3], NelderMEAD(LSMLinear, 1, 0.5, 2, 0.001)[4], NelderMEAD(LSMLinear, 1, 0.5, 2, 0.001)[5]) )\n","#------------------------------------------------------------------------------\n","\n","# Plotting Approximations\n","#------------------------------------------------------------------------------\n","Brute_YL=Linear(x, Brute(LSMLinear)[1], Brute(LSMLinear)[2] )\n","REALGauss_YL=Linear(x, REALGauss(LSMLinear, 0.001)[1], REALGauss(LSMLinear, 0.001)[2] )\n","NelderMEAD_YL=Linear(x, NelderMEAD(LSMLinear,1, 0.5, 2, 0.001)[1], NelderMEAD(LSMLinear,1, 0.5, 2, 0.001)[2] )\n","\n","plt.scatter(x,y, label='Noisy Data')\n","plt.plot(x, Brute_YL, label='Brute Force Method')\n","plt.plot(x, REALGauss_YL, label='Gauss Method')\n","plt.plot(x, NelderMEAD_YL, label='Nelder Mead Method')\n","plt.xlabel('X')\n","plt.ylabel('Y')\n","plt.title('Linear Approximation')\n","plt.legend()\n","plt.show()\n","#------------------------------------------------------------------------------\n"],"execution_count":112,"outputs":[{"output_type":"stream","name":"stdout","text":["\n"," Linear Approximation\n","\n"," Brute Force: F-Calc = 40000, Iterations = 40000 \n","\n"," Gauss Method: F -Calc = 442, Iterations = 17, Precision = 0.001466 \n","\n"," Nelder Mead Method : F -Calc = 9, Iterations = 45, Precision = 0.018166\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":431},"id":"sqoWP5ZOcXWR","executionInfo":{"status":"ok","timestamp":1636124910710,"user_tz":-180,"elapsed":25850,"user":{"displayName":"Ashish T Shivakumar Ireddy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgRJ9Hs72-OthSW0fiMcacnPbFVU5GvCjBJcPEo=s64","userId":"05364880370093993344"}},"outputId":"9e08ac58-4729-4577-a033-643d2fef437a"},"source":["#Plotting For Rational Approximation \n","\n","#------------------------------------------------------------------------------\n","# No of F-Caluclations and Iterations peroformed for least square error Rational Approximation\n","print('\\n Rational Approximation')\n","print('\\n Brute Force: F-Calc = %d, Iterations = %d '%(Brute(LSMRational)[3], Brute(LSMRational)[4]) )\n","print('\\n Gauss Method: F -Calc = %d, Iterations = %d, Precision = %f '%(REALGauss(LSMRational, 0.001)[4], REALGauss(LSMRational, 0.001)[3] , REALGauss(LSMRational, 0.001)[5]) )\n","print('\\n Nelder Mead Method : F -Calc = %d, Iterations = %d, Precision = %f'%(NelderMEAD(LSMRational, 1, 0.5, 2, 0.001)[3], NelderMEAD(LSMRational, 1, 0.5, 2, 0.001)[4], NelderMEAD(LSMRational, 1, 0.5, 2, 0.001)[5]) )\n","#------------------------------------------------------------------------------\n","\n","# Plotting Approximations\n","#------------------------------------------------------------------------------\n","Brute_YR=Rational(x, Brute(LSMRational)[1], Brute(LSMRational)[2] )\n","REALGauss_YR=Rational(x, REALGauss(LSMRational, 0.001)[1], REALGauss(LSMRational, 0.001)[2] )\n","NelderMEAD_YR=Rational(x, NelderMEAD(LSMRational,1, 0.5, 2, 0.001)[1], NelderMEAD(LSMRational,1, 0.5, 2, 0.001)[2] )\n","\n","plt.scatter(x, y, label='Noisy Data')\n","plt.plot(x, Brute_YR, label='Brute Force Method')\n","plt.plot(x, REALGauss_YR, label='Gauss Method')\n","plt.plot(x, NelderMEAD_YR, label='Nelder Mead Method')\n","plt.xlabel('X')\n","plt.ylabel('Y')\n","plt.title('Rational Approximation')\n","plt.legend()\n","plt.show()\n","#------------------------------------------------------------------------------"],"execution_count":114,"outputs":[{"output_type":"stream","name":"stdout","text":["\n"," Rational Approximation\n","\n"," Brute Force: F-Calc = 40000, Iterations = 40000 \n","\n"," Gauss Method: F -Calc = 130, Iterations = 5, Precision = 0.012422 \n","\n"," Nelder Mead Method : F -Calc = 17, Iterations = 85, Precision = 0.016034\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"-VnafofJji1j","executionInfo":{"status":"ok","timestamp":1636123974427,"user_tz":-180,"elapsed":78,"user":{"displayName":"Ashish T Shivakumar Ireddy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgRJ9Hs72-OthSW0fiMcacnPbFVU5GvCjBJcPEo=s64","userId":"05364880370093993344"}}},"source":[""],"execution_count":113,"outputs":[]}]}