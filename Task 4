{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Task 4","provenance":[],"authorship_tag":"ABX9TyMk6Jvo30rQzaoEOLavxzeK"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":602},"id":"bI5hVBjeoAg4","executionInfo":{"status":"ok","timestamp":1635611892562,"user_tz":-180,"elapsed":3486,"user":{"displayName":"Ashish T Shivakumar Ireddy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgRJ9Hs72-OthSW0fiMcacnPbFVU5GvCjBJcPEo=s64","userId":"05364880370093993344"}},"outputId":"6c07bedd-fbd7-4b6c-9f7c-561932b27802"},"source":["# Part 1 of Task 4 \n","\n","#------------------------------------------------------------------------------\n","# Initializing Variables \n","import time \n","import numpy as np\n","import matplotlib.pyplot as plt\n","import math\n","from random import random\n","from scipy import optimize\n","#------------------------------------------------------------------------------\n","\n","#------------------------------------------------------------------------------\n","# Generation of A,B,C,D\n","a = random()\n","b = random()\n","c = random()\n","d = random()\n","#------------------------------------------------------------------------------\n","\n","\n","#------------------------------------------------------------------------------\n","# Variables for storing the following variables. \n","x = np.zeros(1001)\n","y = np.zeros(1001)\n","delta = np.zeros(1001)\n","f = np.zeros(1001)\n","#------------------------------------------------------------------------------\n","\n","\n","#------------------------------------------------------------------------------\n","# Generation of Noise\n","for k in range (0,1001,1):\n","  x[k] = (3*k)/1000\n","  delta[k] = np.random.normal(0, 1)\n","  f[k] = (1/(  (x[k]*x[k]) - (3*x[k])  + 2 ))\n","\n","  #yk function:\n","  if(f[k]< -100):\n","    y[k] = -100 + delta[k]\n","\n","  elif(f[k]> 100):\n","    y[k] = 100 + delta[k]\n","\n","  else:\n","    y[k] = f[k] + delta[k]\n","#------------------------------------------------------------------------------\n","\n","\n","\n","#Rational Function\n","#------------------------------------------------------------------------------\n","def RF(ix):\n","  ans = ( (ix[0]*x) + ix[1] ) / ( (x*x) + (ix[2]*x) + ix[3] )\n","  return ans\n","#------------------------------------------------------------------------------\n","\n","\n","# Least Square Method\n","#------------------------------------------------------------------------------\n","def LSD(ix):\n","   return sum((RF(ix)-y)**2)\n","#------------------------------------------------------------------------------\n","\n","\n","# Single Function without square\n","#------------------------------------------------------------------------------\n","def Rem(ix):\n","  ans2 = RF(ix) - y\n","  return ans2\n","#------------------------------------------------------------------------------\n","\n","\n","# Jacobian Matrix for Function Estimation\n","#------------------------------------------------------------------------------\n","def JMatrix(ix):\n","    m=np.empty((x.size, ix.size))\n","    low=(x**2+ix[2]*x+ix[3]) # Denominator\n","    m[:,0]=x/low\n","    m[:,1]=1/low\n","    m[:,2]=-x*RF(ix)/low\n","    m[:,3]=-RF(ix)/low\n","    return m\n","#------------------------------------------------------------------------------\n","\n","Trial=np.array([ 0.5, 0.4, 0.6, 1])\n","\n","#------------------------------------------------------------------------------\n","\n","# Nelder Mead method calculation function \n","Nelder = optimize.minimize(LSD, Trial, method='Nelder-Mead', options={'maxiter':1000, 'disp':True, 'fatol':0.001} )\n","\n","# Levenberg Marquard method \n","Levenberg = optimize.least_squares(Rem, Trial, jac=JMatrix, method='lm', ftol=0.001, verbose = 2 )\n","\n","# Simulated Annealing\n","low = [-10] * 4 #?\n","high = [10] * 4 #?\n","limits=list(zip(low, high)) #?\n","Annealing = optimize.dual_annealing(LSD, limits, maxiter=1000)\n","\n","# Differential Evalution\n","Diff = optimize.differential_evolution(LSD, limits, maxiter=1000, disp = 1, atol=0.001)\n","\n","#------------------------------------------------------------------------------\n","\n","\n","#------------------------------------------------------------------------------\n","\n","#Minimizing & Calling Functions\n","#------------------------------------------------------------------------------\n","Neldermead = RF(Nelder.x)\n","print(\"Nelder Minimum:\", min(Neldermead))\n","LevenbergMarq = RF(Levenberg.x)\n","print(\"LM Minimum:\", min(LevenbergMarq))\n","SimulatedAnnealing = RF(Annealing.x)\n","print(\"Sim Ann Minimum:\", min(SimulatedAnnealing))\n","print('Status : %s' % Annealing['message'])\n","print('Total Evaluations: %d' % Annealing['nfev'])\n","DifferentailEval = RF(Diff.x)\n","print(\"Diff Eval Minimum\", min(DifferentailEval))\n","print('Status : %s' % Diff['message'])\n","print('Total Evaluations: %d' % Diff['nfev'])\n","#------------------------------------------------------------------------------\n","\n","#Final Plotting\n","#------------------------------------------------------------------------------\n","plt.scatter(x, y, label = 'Noisy Data', color = 'skyblue')\n","plt.plot(x, Neldermead, label='Nelder-Mead', color = 'red')\n","plt.plot(x, LevenbergMarq, label='Levenberg-Marquard', color = 'green')\n","plt.plot(x, SimulatedAnnealing, label='Simulated Annealing', color = 'violet')\n","plt.plot(x, DifferentailEval, label='Differential Evaluation', color = 'orange')\n","plt.ylabel('Y')\n","plt.xlabel('X')\n","plt.legend()\n","plt.show()\n","#------------------------------------------------------------------------------\n"],"execution_count":37,"outputs":[{"output_type":"stream","name":"stdout","text":["Optimization terminated successfully.\n","         Current function value: 136312.436562\n","         Iterations: 319\n","         Function evaluations: 543\n","`ftol` termination condition is satisfied.\n","Function evaluations 32, initial cost 1.3412e+05, final cost 6.8156e+04, first-order optimality 1.24e+06.\n","differential_evolution step 1: f(x)= 267495\n","differential_evolution step 2: f(x)= 267379\n","differential_evolution step 3: f(x)= 267359\n","differential_evolution step 4: f(x)= 267359\n","differential_evolution step 5: f(x)= 267262\n","Nelder Minimum: -123.75156367495441\n","LM Minimum: -123.9072656799254\n","Sim Ann Minimum: -123.76128951011755\n","Status : ['Maximum number of iteration reached']\n","Total Evaluations: 9076\n","Diff Eval Minimum -123.7611788749576\n","Status : Optimization terminated successfully.\n","Total Evaluations: 1300\n"]},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAY0AAAEGCAYAAACZ0MnKAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nO3deXxU5dn4/889SzJZgbAJhRC0iBAIISxCgQqKBB99qAsKiKXoT1EBt59al/oUu9DSR1strsVKQeUBrKJVqhVpBRUXIGwSFoMKAUWWBLIvs9zfP87MZCaZJBNIZslc79crr8ycc2bmPrOc69zLuW6ltUYIIYQIhincBRBCCBE9JGgIIYQImgQNIYQQQZOgIYQQImgSNIQQQgTNEu4CtKUuXbrojIyMcBdDCCGiSl5e3kmtdddA69p10MjIyGDr1q3hLoYQQkQVpdShxtZJ85QQQoigSdAQQggRNAkaQgghgtau+zSEaI/sdjtHjhyhuro63EURUc5ms9GrVy+sVmvQj5GgIUSUOXLkCCkpKWRkZKCUCndxRJTSWlNUVMSRI0fo27dv0I+T5ikhokx1dTWdO3eWgCHOilKKzp07t7jGKkFDiCgkAUO0hjP5HknQEFGj6G8PU7N/R7iLIURMk6AhokLF4QI6x/8e58fTw10UgXGGeu+993rvP/744zz66KNNPmbZsmXMnz8/4Lrk5OSzKk9GRgbjxo3zW5adnc2gQYPO6nk9Hn30UR5//PFWea5oJ0FDRIXq0pMAxMcdD3NJBEB8fDxr1qzh5MmTIX9trTUul6vB8rKyMg4fPgzA3r17Q12smCFBQ0QFl8MOgNbmMJdEAFgsFubMmcMTTzzRYN2JEye45pprGDFiBCNGjGDTpk0Ntvnmm28YPXo0gwcP5pFHHvFb99hjjzFixAiysrJYsGABAAcPHqR///7MmjWLQYMGeYODr+uuu47Vq1cDsHLlSmbMmOFd53Q6uf/++73P+5e//AWA8vJyLrnkEnJychg8eDD/+Mc/vI9ZuHAh559/PmPHjmX//v1n8C61TzLkVkQFl6PWfUs6gP3cfTfsaOV+nuxsePLJZjebN28eWVlZ/PznP/dbftddd3HPPfcwduxYCgsLyc3NbXDmf9ddd3H77bcza9YsnnnmGe/ydevWUVBQwObNm9FaM2XKFD788EPS09MpKChg+fLljBo1KmB5rrnmGm688Ubuu+8+3n77bVasWMHLL78MwIsvvkiHDh3YsmULNTU1jBkzhkmTJtG7d2/eeOMNUlNTOXnyJKNGjWLKlCls27aNVatWsWPHDhwOBzk5OQwbNqyl72S7JEFDRAXtDhpaS+U4UqSmpjJr1iwWL15MQkKCd/n69evZs2eP935paSnl5eV+j920aROvv/46AD/96U954IEHACNorFu3jqFDhwJGTaCgoID09HT69OnTaMAA6Ny5M506dWLVqlUMGDCAxMRE77p169axa9cuXnvtNQBKSkooKCigV69ePPzww3z44YeYTCa+/fZbjh07xkcffcRVV13lfY4pU6aczVvVrkjQEFHBWV0JgJYWVX9B1Aja0t13301OTg433nijd5nL5eKzzz7DZrM1+dhAwz211jz00EPceuutfssPHjxIUlISYDQ1ec76p0yZwq9//WvvdtOmTWPevHksW7aswfM+9dRT5Obm+i1ftmwZJ06cIC8vD6vVSkZGhlxp3wz5BYqo4KytdN+S5qlIkpaWxnXXXceLL77oXTZp0iSeeuop7/0dAZrPxowZw6pVqwBYsWKFd3lubi5Lly711ky+/fZbjh/3H/xgNpvZsWMHO3bs8AsYAFdddRU///nPGwSH3NxcnnvuOex2o2/syy+/pKKigpKSErp164bVauWDDz7g0CEjI/iPf/xj3nzzTaqqqigrK+Ptt99u8XvTXknQEFHBaTfO/qR5KvLce++9fqOoFi9ezNatW8nKymLgwIE8//zzDR7z5z//mWeeeYbBgwfz7bffepdPmjSJ66+/3ttJPnXqVMrKyoIuS0pKCg888ABxcXF+y2+++WYGDhxITk4OgwYN4tZbb8XhcDBz5ky2bt3K4MGDeemll7jgggsAyMnJYdq0aQwZMoTLLruMESNGtPRtabeU1jrcZWgzw4cP1zIJU/vw1VtPcV75ndTUphM/u9H5YWLC3r17GTBgQLiLIdqJQN8npVSe1np4oO3ltE1EBW2vMf5raZ4SIpwkaIio4HK4g4Z8ZYUIK/kFiqigJWgIERHkFyiigna6L+6T5ikhwkqChogK2ukw/stXVoiwkl+giAra5Q4aUtMQIqwkaIjo4HKnEZGL+yLC2aYyPxMbNmzgiiuuCMlrjR8/nvT0dHwvSbjyyivD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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"-JhWIcoVCZIi"},"source":["# Single plotting\n","plt.scatter(x, y, label = 'Noisy Data', color = 'skyblue')\n","plt.plot(x, Neldermead, label='Nelder-Mead', color = 'red')\n","plt.plot(x, LevenbergMarq, label='Levenberg-Marquard', color = 'green')\n","plt.plot(x, SimulatedAnnealing, label='Simulated Annealing', color = 'violet')\n","plt.plot(x, DifferentailEval, label='Differential Evaluation', color = 'orange')\n","plt.ylabel('Y')\n","plt.xlabel('X')\n","plt.legend()\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vJRAg9yrHo24","executionInfo":{"status":"ok","timestamp":1635613939091,"user_tz":-180,"elapsed":498,"user":{"displayName":"Ashish T Shivakumar Ireddy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgRJ9Hs72-OthSW0fiMcacnPbFVU5GvCjBJcPEo=s64","userId":"05364880370093993344"}},"outputId":"63b90f0b-2c24-492b-ba92-74ff7b19a306"},"source":["# Task 4 - Part 2\n","#Simulated Annealing for Travelling salesman problem\n","\n","# Import libraries\n","import sys\n","import random\n","import copy\n","import numpy as np\n","# This class represent a state\n","class State:\n","    # Create a new state\n","    def __init__(self, route:[], distance:int=0):\n","        self.route = route\n","        self.distance = distance\n","    # Compare states\n","    def __eq__(self, other):\n","        for i in range(len(self.route)):\n","            if(self.route[i] != other.route[i]):\n","                return False\n","        return True\n","    # Sort states\n","    def __lt__(self, other):\n","         return self.distance < other.distance\n","    # Print a state\n","    def __repr__(self):\n","        return ('({0},{1})\\n'.format(self.route, self.distance))\n","    # Create a shallow copy\n","    def copy(self):\n","        return State(self.route, self.distance)\n","    # Create a deep copy\n","    def deepcopy(self):\n","        return State(copy.deepcopy(self.route), copy.deepcopy(self.distance))\n","    # Update distance\n","    def update_distance(self, matrix, home):\n","        \n","        # Reset distance\n","        self.distance = 0\n","        # Keep track of departing city\n","        from_index = home\n","        # Loop all cities in the current route\n","        for i in range(len(self.route)):\n","            self.distance += matrix[from_index][self.route[i]]\n","            from_index = self.route[i]\n","        # Add the distance back to home\n","        self.distance += matrix[from_index][home]\n","# This class represent a city (used when we need to delete cities)\n","\n","class City:\n","    # Create a new city\n","    def __init__(self, index:int, distance:int):\n","        self.index = index\n","        self.distance = distance\n","    # Sort cities\n","    def __lt__(self, other):\n","         return self.distance < other.distance\n","# Return true with probability p\n","def probability(p):\n","    return p > random.uniform(0.0, 1.0)\n","# Schedule function for simulated annealing\n","def exp_schedule(k=20, lam=0.005, limit=1000):\n","    return lambda t: (k * np.exp(-lam * t) if t < limit else 0)\n","# Get the best random solution from a population\n","def get_random_solution(matrix:[], home:int, city_indexes:[], size:int, use_weights:bool=False):\n","    # Create a list with city indexes\n","    cities = city_indexes.copy()\n","    # Remove the home city\n","    cities.pop(home)\n","    # Create a population\n","    population = []\n","    for i in range(size):\n","        if(use_weights == True):\n","            state = get_random_solution_with_weights(matrix, home)\n","        else:\n","            # Shuffle cities at random\n","            random.shuffle(cities)\n","            # Create a state\n","            state = State(cities[:])\n","            state.update_distance(matrix, home)\n","        # Add an individual to the population\n","        population.append(state)\n","    # Sort population\n","    population.sort()\n","    # Return the best solution\n","    return population[0]\n","\n","# Get best solution by distance\n","def get_best_solution_by_distance(matrix:[], home:int):\n","    \n","    # Variables\n","    route = []\n","    from_index = home\n","    length = len(matrix) - 1\n","    # Loop until route is complete\n","    while len(route) < length:\n","         # Get a matrix row\n","        row = matrix[from_index]\n","        # Create a list with cities\n","        cities = {}\n","        for i in range(len(row)):\n","            cities[i] = City(i, row[i])\n","        # Remove cities that already is assigned to the route\n","        del cities[home]\n","        for i in route:\n","            del cities[i]\n","        # Sort cities\n","        sorted = list(cities.values())\n","        sorted.sort()\n","        # Add the city with the shortest distance\n","        from_index = sorted[0].index\n","        route.append(from_index)\n","    # Create a new state and update the distance\n","    state = State(route)\n","    state.update_distance(matrix, home)\n","    # Return a state\n","    return state\n","\n","# Mutate a solution\n","\n","def mutate(matrix:[], home:int, state:State, mutation_rate:float=0.01):\n","    \n","    # Create a copy of the state\n","    mutated_state = state.deepcopy()\n","    # Loop all the states in a route\n","    for i in range(len(mutated_state.route)):\n","        # Check if we should do a mutation\n","        if(random.random() < mutation_rate):\n","            # Swap two cities\n","            j = int(random.random() * len(state.route))\n","            city_1 = mutated_state.route[i]\n","            city_2 = mutated_state.route[j]\n","            mutated_state.route[i] = city_2\n","            mutated_state.route[j] = city_1\n","    # Update the distance\n","    mutated_state.update_distance(matrix, home)\n","    # Return a mutated state\n","    return mutated_state\n","\n","# Simulated annealing-------------------------------------------------------\n","def simulated_annealing(matrix:[], home:int, initial_state:State, mutation_rate:float=0.01, schedule=exp_schedule()):\n","    # Keep track of the best state\n","    best_state = initial_state\n","    # Loop a large number of times (int.max)\n","    for t in range(sys.maxsize):\n","        # Get a temperature\n","        T = schedule(t)\n","        # Return if temperature is 0\n","        if T == 0:\n","            return best_state\n","        # Mutate the best state\n","        neighbor = mutate(matrix, home, best_state, mutation_rate)\n","        # Calculate the change in e\n","        delta_e = best_state.distance - neighbor.distance\n","        # Check if we should update the best state\n","        if delta_e > 0 or probability(np.exp(delta_e / T)):\n","            best_state = neighbor\n","    \n","\n","def main():\n","    # Cities as points\n","    cities = ['City 1', 'City 2', 'City 3', 'City 4', 'City 5', 'City 6', 'City 7', 'City 8', 'City 9', 'City 10', 'City 11', 'City 12', 'City 13', 'City 14', 'City 15']\n","    city_indexes = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]\n","    # Index of starting location\n","    home = 0 # \n","    # Distances Matrix\n","    matrix = [[00, 29, 82, 46, 68, 52, 72, 42, 51, 55, 29, 74, 23, 72, 46],\n","             [29, 00, 55, 46, 42, 43, 43, 23, 23, 31, 41, 51, 11, 52, 21],  \n","             [82, 55, 00, 68, 46, 55, 23, 43, 41, 29, 79, 21, 64, 31, 51],\n","             [46, 46, 68, 00, 82, 15, 72, 31, 62, 42, 21, 51, 51, 43, 64], \n","             [68, 42, 46, 82, 00, 74, 23, 52, 21, 46, 82, 58, 46, 65, 23],  \n","             [52, 43, 55, 15, 74, 00, 61, 23, 55, 31, 33, 37, 51, 29, 59],  \n","             [72, 43, 23, 72, 23, 61, 00, 42, 23, 31, 77, 37, 51, 46, 33],  \n","             [42, 23, 43, 31, 52, 23, 42, 00, 33, 15, 37, 33, 33, 31, 37],  \n","             [51, 23, 41, 62, 21, 55, 23, 33, 00, 29, 62, 46, 29, 51, 11],  \n","             [55, 31, 29, 42, 46, 31, 31, 15, 29, 00, 51, 21, 41, 23, 37],  \n","             [29, 41, 79, 21, 82, 33, 77, 37, 62, 51, 00, 65, 42, 59, 61],  \n","             [74, 51, 21, 51, 58, 37, 37, 33, 46, 21, 65, 00, 61, 11, 55],  \n","             [23, 11, 64, 51, 46, 51, 51, 33, 29, 41, 42, 61, 00, 62, 23],  \n","             [72, 52, 31, 43, 65, 29, 46, 31, 51, 23, 59, 11, 62, 00, 59], \n","             [46, 21, 51, 64, 23, 59, 33, 37, 11, 37, 61, 55, 23, 59, 00]]\n","\n","\n","    # Minimization\n","    state = get_best_solution_by_distance(matrix, home)\n","    state = simulated_annealing(matrix, home, state, 0.1)\n","    print('-- Simulated annealing solution --')\n","    print(cities[home], end='')\n","    for i in range(0, len(state.route)):\n","       print(' -> ' + cities[state.route[i]], end='')\n","    print(' -> ' + cities[home], end='')\n","    print('\\n\\nTotal distance: {0} Distance Units '.format(state.distance))\n","    print()\n","\n","\n","main()"],"execution_count":52,"outputs":[{"output_type":"stream","name":"stdout","text":["-- Simulated annealing solution --\n","City 1 -> City 13 -> City 2 -> City 15 -> City 9 -> City 5 -> City 7 -> City 3 -> City 12 -> City 14 -> City 10 -> City 8 -> City 6 -> City 4 -> City 11 -> City 1\n","\n","Total distance: 291 Distance Units \n","\n"]}]},{"cell_type":"code","metadata":{"id":"DTQb1QTMLT4j"},"source":[""],"execution_count":null,"outputs":[]}]}