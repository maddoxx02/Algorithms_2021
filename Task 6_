{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Task 6 ","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyMcxLqqblTFd5wyKw7+SN56"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"FfGG6whETzo2","executionInfo":{"status":"ok","timestamp":1637613316754,"user_tz":-180,"elapsed":365,"user":{"displayName":"Ashish T Shivakumar Ireddy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgRJ9Hs72-OthSW0fiMcacnPbFVU5GvCjBJcPEo=s64","userId":"05364880370093993344"}}},"source":["import time \n","import math\n","import networkx as nx\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from collections import defaultdict \n","from igraph import Graph\n"],"execution_count":33,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hdsH7Cr0f_Vo","executionInfo":{"status":"ok","timestamp":1637611724328,"user_tz":-180,"elapsed":24,"user":{"displayName":"Ashish T Shivakumar Ireddy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgRJ9Hs72-OthSW0fiMcacnPbFVU5GvCjBJcPEo=s64","userId":"05364880370093993344"}},"outputId":"07e0367a-43a0-4d70-dfd8-10659c4416de"},"source":["#------------------------------------------------------------------------------\n","\n","#Generation of Random Matrix with 100 Vertexes and 500 Edges\n","\n","def Matrix(size):\n","  \n","  A = np.zeros([size + 1, size + 1])\n","\n","  A[:, 0] = np.arange(size+1)\n","  A[0, :] = np.arange(size+1)\n","\n","  for i in range(1,size+1): \n","\n","    for j in range(1,size+1):\n","\n","      if i !=j: #Creation of Symmetry \n","        A[i, j] = A[j, i] = np.random.randint(1,10) #Assigning Edges\n","\n","      if sum(sum(A[1:, 1:]))>9000: #Edge verification  \n","        break\n","        \n","    if sum(sum(A[1:,1:]))>=9000: #Edge Verification\n","      break\n","\n","  return A\n","\n","\n","ADJMatrix = Matrix(100)\n","print(\"Adjacency Matrix:\")\n","print(ADJMatrix)"],"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Adjacency Matrix:\n","[[  0.   1.   2. ...  98.  99. 100.]\n"," [  1.   0.   3. ...   4.   6.   1.]\n"," [  2.   3.   0. ...   7.   1.   1.]\n"," ...\n"," [ 98.   4.   7. ...   0.   0.   0.]\n"," [ 99.   6.   1. ...   0.   0.   0.]\n"," [100.   1.   1. ...   0.   0.   0.]]\n"]}]},{"cell_type":"code","metadata":{"id":"5Ho9avPngNXK","executionInfo":{"status":"ok","timestamp":1637609609604,"user_tz":-180,"elapsed":490,"user":{"displayName":"Ashish T Shivakumar Ireddy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgRJ9Hs72-OthSW0fiMcacnPbFVU5GvCjBJcPEo=s64","userId":"05364880370093993344"}}},"source":["#------------------------------------------------------------------------------\n","#Printing Full Adjacency Matrix \n","#for i in range(101):\n","#  for j in range(101): \n","#    print(ADJMatrix[i][j], sep=',', end='', flush=True)\n","#  print(\"\\n\")\n","#------------------------------------------------------------------------------"],"execution_count":8,"outputs":[]},{"cell_type":"code","metadata":{"id":"P9ZZLx8qgxiY","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1637611729190,"user_tz":-180,"elapsed":370,"user":{"displayName":"Ashish T Shivakumar Ireddy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgRJ9Hs72-OthSW0fiMcacnPbFVU5GvCjBJcPEo=s64","userId":"05364880370093993344"}},"outputId":"43652d49-229b-47f6-873f-fdd6c7bb043c"},"source":["#----------------------------------------------------------------------------\n","#Adjacency List Generation using ADJ Matrix\n","\n","def MTL(IN):\n","\n","  AList = defaultdict(list)\n","\n","  for i in range(1,len(IN)):\n","\n","    for j in range(1,len(IN[i])):\n","\n","        if IN[i][j]== 1:\n","          AList[i].append(j)\n","\n","  return AList\n","\n","ADJList = MTL(ADJMatrix)\n","\n","#Printing\n","for i in ADJList:\n","  print(i, end =\".array\")\n","  for j in ADJList[i]:\n","   print(\" {},\".format(j), end =\"\")\n","  print()\n","#------------------------------------------------------------------------------"],"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["1.array 8, 24, 29, 39, 50, 72, 82, 84, 88, 94, 100,\n","2.array 7, 21, 29, 37, 38, 64, 83, 99, 100,\n","3.array 16, 36, 41, 43, 53, 55, 67, 82, 90, 99,\n","4.array 13, 17, 24, 34, 47, 61, 73, 78, 92, 95, 96, 99,\n","5.array 7, 11, 29, 65, 67, 80, 81, 96,\n","6.array 10, 21, 28, 29, 45, 47, 48, 49, 59, 64, 70, 75, 84, 85, 86, 90, 92, 94,\n","7.array 2, 5, 13, 21, 22, 28, 33, 34, 64, 65, 75, 95,\n","8.array 1, 23, 27, 40, 47, 53, 62, 77, 93, 94,\n","9.array 25, 30, 60, 63, 68, 73, 85, 86, 97,\n","10.array 6,\n","11.array 5,\n","13.array 4, 7,\n","16.array 3,\n","17.array 4,\n","21.array 2, 6, 7,\n","22.array 7,\n","23.array 8,\n","24.array 1, 4,\n","25.array 9,\n","27.array 8,\n","28.array 6, 7,\n","29.array 1, 2, 5, 6,\n","30.array 9,\n","33.array 7,\n","34.array 4, 7,\n","36.array 3,\n","37.array 2,\n","38.array 2,\n","39.array 1,\n","40.array 8,\n","41.array 3,\n","43.array 3,\n","45.array 6,\n","47.array 4, 6, 8,\n","48.array 6,\n","49.array 6,\n","50.array 1,\n","53.array 3, 8,\n","55.array 3,\n","59.array 6,\n","60.array 9,\n","61.array 4,\n","62.array 8,\n","63.array 9,\n","64.array 2, 6, 7,\n","65.array 5, 7,\n","67.array 3, 5,\n","68.array 9,\n","70.array 6,\n","72.array 1,\n","73.array 4, 9,\n","75.array 6, 7,\n","77.array 8,\n","78.array 4,\n","80.array 5,\n","81.array 5,\n","82.array 1, 3,\n","83.array 2,\n","84.array 1, 6,\n","85.array 6, 9,\n","86.array 6, 9,\n","88.array 1,\n","90.array 3, 6,\n","92.array 4, 6,\n","93.array 8,\n","94.array 1, 6, 8,\n","95.array 4, 7,\n","96.array 4, 5,\n","97.array 9,\n","99.array 2, 3, 4,\n","100.array 1, 2,\n"]}]},{"cell_type":"code","metadata":{"id":"CqOCkkUs_0JV","executionInfo":{"status":"ok","timestamp":1637615006465,"user_tz":-180,"elapsed":489,"user":{"displayName":"Ashish T Shivakumar Ireddy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgRJ9Hs72-OthSW0fiMcacnPbFVU5GvCjBJcPEo=s64","userId":"05364880370093993344"}}},"source":["#-----------------------------------------------------------------------------\n","class Graph():\n","\n","  def __init__(self):\n","\n","    self.edges = defaultdict(list)\n","    self.weights = {}\n","\n","  def add_edge(self, from_node, to_node, weight):\n","    self.edges[from_node].append(to_node)\n","    self.edges[to_node].append(from_node)\n","    self.weights[(from_node, to_node)] = weight\n","    self.weights[(to_node, from_node)] = weight\n","\n","graph = Graph()\n","for i in range (1,101):\n","  for j in range(1,101):\n","    z=ADJMatrix[i][j]\n","    if z !=0:\n","      graph.add_edge(i, j, z)\n","#-----------------------------------------------------------------------------\n","# Dijsktra Algorithm \n","def dijsktra(graph, initial, end):\n","  shortest_paths = {initial: (None, 0)}\n","  current_node = initial\n","  visited = set()\n","\n","  while current_node != end:\n","    visited.add(current_node)\n","    destinations = graph.edges[current_node]\n","    weight_to_current_node = shortest_paths[current_node][1]\n","\n","    for next_node in destinations:\n","      weight = graph.weights[(current_node, next_node)] + weight_to_current_node\n","      if next_node not in shortest_paths:\n","        shortest_paths[next_node] = (current_node, weight)\n","      else:\n","        current_shortest_weight = shortest_paths[next_node][1]\n","        if current_shortest_weight > weight:\n","          shortest_paths[next_node] = (current_node, weight)\n","\n","    next_destinations = {node: shortest_paths[node] for node in shortest_paths if node not in visited}\n","\n","    if not next_destinations:\n","      return \"Route Not Possible\"\n","\n","    current_node = min(next_destinations, key=lambda k: next_destinations[k][1])\n","  \n","  path = []\n","  while current_node is not None:\n","    path.append(current_node)\n","    next_node = shortest_paths[current_node][0]\n","    current_node = next_node\n","  # Reverse path\n","  path = path[::-1]\n","  return path\n","#-----------------------------------------------------------------------------\n","#BellmanFord Method  !!! issue with graphical copy input\n","\n","def Bellman_ford(graphin, start, end):\n","  shortest_distance={}\n","  visited={}\n","  \n","graph = Graph()\n","for i in range (1,101):\n","  for j in range(1,101):\n","    z=ADJMatrix[i][j]\n","    if z !=0:\n","      graph.add_edge(i, j, z)\n","  unvisited = graphin.copy()\n","  for node in unvisited:\n","    shortest_distance[node]=float('inf')\n","  shortest_distance[start]=0\n","  path=[]\n","  for i in range(len(ADJList)-1):\n","    for u in graphin:\n","      for v in graphin[u]:\n","        if shortest_distance[v]>shortest_distance[u]+graphin[u][v]:\n","           shortest_distance[v]=shortest_distance[u]+graphin[u][v]\n","           visited[v]=u\n","  for u in graphin:\n","    for v in graphin[u]:\n","      assert shortest_distance[v] <= \\\n","        shortest_distance[u] + graphin[u][v], \"Negative cycle exists\"\n","  currentNode = end\n","  while currentNode != start:\n","    path.insert(0,currentNode)\n","    currentNode = visited[currentNode]\n","  return shortest_distance[end], path\n","#-----------------------------------------------------------------------------"],"execution_count":60,"outputs":[]},{"cell_type":"code","metadata":{"id":"2kSIlEwWA1La"},"source":["#----------------------------------------------------------------------------- \n","#Time Extraction \n","def time1(a,b):\n","  x=[]\n","  w=[]\n","  for i in range(10):\n","    start_time=time.time()\n","    y=dijsktra(graph, a,b )\n","    x.append(time.time()-start_time)\n","  x=sum(x)/10\n","  #for i in range(10):\n","  #  start_time=time.time()\n","  #  v=Bellman_ford(graph, a, b)\n","  #  w.append(time.time()-start_time)\n","  #w=sum(w)/10\n","  print(y)\n","  print(x)\n","  #print(w)\n","\n","time1(17,3)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YGL1OWwvIWaJ","executionInfo":{"status":"ok","timestamp":1637615227972,"user_tz":-180,"elapsed":400,"user":{"displayName":"Ashish T Shivakumar Ireddy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgRJ9Hs72-OthSW0fiMcacnPbFVU5GvCjBJcPEo=s64","userId":"05364880370093993344"}},"outputId":"868f971e-745e-4b7e-a581-1f6b437d17f9"},"source":["#-----------------------------------------------------------------------------\n","# 10x20 Grid Generation with 40 obstacles\n","def grid():\n","  g= np.zeros([20, 10])\n","  for i in range(20):\n","    for j in range(10):\n","      g[i, j]=np.random.randint(0,2)\n","      if sum(sum(g))>=40:\n","        break\n","    if sum(sum(g))>=40:\n","      break\n","  return g\n","\n","grid()\n","#-----------------------------------------------------------------------------"],"execution_count":64,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[1., 1., 1., 0., 0., 1., 0., 1., 0., 1.],\n","       [1., 0., 1., 0., 0., 1., 1., 0., 1., 0.],\n","       [1., 0., 1., 1., 0., 1., 0., 1., 1., 0.],\n","       [1., 1., 1., 0., 0., 0., 1., 1., 1., 1.],\n","       [1., 1., 1., 1., 0., 1., 1., 0., 1., 0.],\n","       [0., 1., 0., 1., 1., 0., 0., 0., 1., 0.],\n","       [0., 0., 0., 0., 1., 0., 1., 0., 0., 0.],\n","       [0., 1., 0., 0., 1., 1., 0., 0., 0., 0.],\n","       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n","       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n","       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n","       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n","       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n","       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n","       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n","       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n","       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n","       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n","       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n","       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])"]},"metadata":{},"execution_count":64}]},{"cell_type":"code","metadata":{"id":"lwgytsYA2U2V","executionInfo":{"status":"ok","timestamp":1637621521012,"user_tz":-180,"elapsed":456,"user":{"displayName":"Ashish T Shivakumar Ireddy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgRJ9Hs72-OthSW0fiMcacnPbFVU5GvCjBJcPEo=s64","userId":"05364880370093993344"}}},"source":["#-----------------------------------------------------------------------------\n","#A* Method of Navigation \n","\n","def astar(maze, start, end):\n","  # Create start and end node\n","  start_node = Node(None, start)\n","  start_node.g = start_node.h = start_node.f = 0\n","  end_node = Node(None, end)\n","  end_node.g = end_node.h = end_node.f = 0\n","\n","  # Initialize both open and closed list\n","  open_list = []\n","  closed_list = []\n","\n","  # Add the start node\n","  open_list.append(start_node)\n","\n","  # Loop until you find the end\n","  while len(open_list) > 0:\n","\n","  # Get the current node\n","    current_node = open_list[0]\n","    current_index = 0\n","    for index, item in enumerate(open_list):\n","      if item.f < current_node.f:\n","        current_node = item\n","        current_index = index\n","\n","  # Pop current off open list, add to closed list\n","  open_list.pop(current_index)\n","  closed_list.append(current_node)\n","\n","  # Found the goal\n","  if current_node == end_node:\n","    path = []\n","    current = current_node\n","    while current is not None:\n","      path.append(current.position)\n","      current = current.parent\n","    return path[::-1] # Return reversed path\n","\n","  # Generate children\n","  children = []\n","  for new_position in [(0, -1), (0, 1), (-1, 0), (1, 0), (-1, -1), (-1, 1), (1, -1), (1, 1)]: # Adjacent squares\n","  # Get node position\n","    node_position = (current_node.position[0] + new_position[0], current_node.position[1] + new_position[1])\n","\n","  # Make sure within range\n","    if node_position[0] > (len(maze) - 1) or node_position[0] < 0 or node_position[1] > (len(maze[len(maze)-1]) -1) or node_position[1] < 0:\n","      continue\n","\n","  # Make sure walkable terrain\n","    if maze[node_position[0]][node_position[1]] != 0:\n","      continue\n","\n","  # Create new node\n","    new_node = Node(current_node, node_position)\n","\n","  # Append\n","    children.append(new_node)\n","\n","  # Loop through children\n","  for child in children:\n","\n","    # Child is on the closed list\n","    for closed_child in closed_list:\n","      if child == closed_child:\n","        continue\n","\n","# Create the f, g, and h values\n","    child.g = current_node.g + 1\n","    child.h = ((child.position[0] - end_node.position[0]) ** 2) + ((child.position[1] - end_node.position[1]) ** 2)\n","    child.f = child.g + child.h\n","\n","  # Child is already in the open list\n","    for open_node in open_list:\n","      if child == open_node and child.g > open_node.g:\n","        continue\n","\n","# Add the child to the open list\n","    open_list.append(child)\n","\n","#-----------------------------------------------------------------------------"],"execution_count":89,"outputs":[]},{"cell_type":"code","metadata":{"id":"dHp5hhNKGv3q"},"source":["dijsktra(graph, 66, 76)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"t9ne0L9J2Xnj"},"source":["Bellman_ford(graph, 45, 32)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"VRbOZx0ReVB0"},"source":["astar(grid, (0,0), (2,2)) #vARIOUS COORDINATES"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"bi30vqcUebxD"},"source":[""],"execution_count":null,"outputs":[]}]}