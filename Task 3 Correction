{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Task 3 Correction","provenance":[],"authorship_tag":"ABX9TyNBlJOn+ELt6KRjRCXD5ufN"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"KvZKrbJuIApY","executionInfo":{"status":"ok","timestamp":1636648908491,"user_tz":-180,"elapsed":644,"user":{"displayName":"Ashish T Shivakumar Ireddy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgRJ9Hs72-OthSW0fiMcacnPbFVU5GvCjBJcPEo=s64","userId":"05364880370093993344"}}},"source":["import time \n","import numpy as np\n","import matplotlib.pyplot as plt\n","import math\n","from scipy import optimize\n","from random import random\n","from scipy.optimize import minimize\n"],"execution_count":14,"outputs":[]},{"cell_type":"code","metadata":{"id":"Wj2PrIepGHum","executionInfo":{"status":"ok","timestamp":1636648966288,"user_tz":-180,"elapsed":416,"user":{"displayName":"Ashish T Shivakumar Ireddy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgRJ9Hs72-OthSW0fiMcacnPbFVU5GvCjBJcPEo=s64","userId":"05364880370093993344"}}},"source":["#Initialization \n","#------------------------------------------------------------------------------\n","x = np.zeros((101)) # X values\n","y = np.zeros((101)) # Y values\n","g = np.zeros((101)) # Detla\n","\n","\n","alpha = random()\n","beta = random()\n","\n","\n","for k in range(100): # Geneartion of Noise \n","  g[k] = np.random.normal(0, 1)\n","  x[k] = k/100\n","  y[k] = (alpha*x[k]) + beta + g[k]\n","\n","#------------------------------------------------------------------------------"],"execution_count":27,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":516},"id":"b4avFdP-PtMU","executionInfo":{"status":"ok","timestamp":1636650083080,"user_tz":-180,"elapsed":1675,"user":{"displayName":"Ashish T Shivakumar Ireddy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgRJ9Hs72-OthSW0fiMcacnPbFVU5GvCjBJcPEo=s64","userId":"05364880370093993344"}},"outputId":"7b673953-c0e9-4bfb-fba1-501e85517684"},"source":["#------------------------------------------------------------------------------\n","#Linear Function\n","def Linear(xx):\n","  ans1 = xx[0]*x + xx[1]\n","  return ans1\n","\n","#Square Error\n","def LinearSQE(Lin):\n","  T1 = Lin[0]\n","  T2 = Lin[1]\n","  T = 0\n","  for i in range(101):\n","    T = T + (((T1*x[i]+T2) -y[i])**2)\n","  return T\n","\n","#Gradient Error Calculation\n","def GradientLSQE(Gin):\n","  G1 = Gin[0]\n","  G2 = Gin[1]\n","  Gcalc = (G1*x)+G2\n","  G11 = 2*sum(x*(Gcalc-y))\n","  G22 = 2*sum(Gcalc-y)\n","  return np.asarray((G11, G22))\n","\n","# Hessian Matrix Calculation\n","def HessianLinear(HLin):\n","  H1 = HLin[0]\n","  H2 = HLin[1]\n","  Hcalc = H1*x+H2\n","  H11 = 2*sum(x**2)\n","  H12 = 2*sum(x)\n","  H21 = 2*sum(x)\n","  H22 = 2*101\n","  return np.asarray([[H11, H12], [H21, H22]])\n","\n","# Remainder Calculation\n","def LinearRem(LRin):\n","  return Linear(LRin) - y\n","\n","# Jacobian Matrix\n","def Linear_Matrix(LMin):\n","  LMTemp = np.zeros((x.size, LMin.size))\n","  LMTemp[:,0] = x\n","  LMTemp[:,1] = 1\n","  return LMTemp\n","\n","#------------------------------------------------------------------------------\n","#Initial Values\n","Example = np.array([0.5,0.5])\n","#------------------------------------------------------------------------------\n","\n","# Gradient Descent Method\n","\n","count = 0\n","error = 0.0001\n","LGA = 0.00001 \n","AG1,AG2=0.5,0.5\n","GG1,GG2=1,1\n","\n","while GG1>error and GG2>error:\n","  vl = AG1*x+AG2\n","  A1Temp = AG1\n","  A2Temp = AG2\n","\n","  A1Grad = GradientLSQE([AG1,AG2])[0]\n","  A2Grad = GradientLSQE([AG1,AG2])[1]\n","\n","  AG1 = AG1-LGA*A1Grad\n","  AG2 = AG2-LGA*A2Grad\n","\n","  GG1 = abs(AG1-A1Temp)\n","  GG2 = abs(AG2-A2Temp)\n","  count+=1\n","GL = Linear([AG1,AG2])\n","\n","#------------------------------------------------------------------------------\n","#Conjugate Method\n","LC = optimize.fmin_cg(LinearSQE, Example, fprime=GradientLSQE, gtol=0.001 )\n","LConjugateGradient = Linear(LC)\n","#------------------------------------------------------------------------------\n","\n","#------------------------------------------------------------------------------\n","#Newtons Method\n","LN = optimize.minimize(LinearSQE, Example, jac=GradientLSQE, method='Newton-CG', hess = HessianLinear, tol=0.001, options={'disp':True})\n","LNewton = Linear(LN.x)\n","#------------------------------------------------------------------------------\n","\n","#------------------------------------------------------------------------------\n","#Marq Levenburg Method\n","LLM = optimize.least_squares(LinearRem, Example, jac=Linear_Matrix, method='lm',ftol=0.001, verbose = 2)\n","LMarqLevenburg = Linear(LLM.x)\n","#------------------------------------------------------------------------------\n","\n","#------------------------------------------------------------------------------\n","# Plotting\n","plt.scatter(x, y)\n","plt.plot(x, GL, '-r', label='Gradient Descent')\n","plt.plot(x, LConjugateGradient, '-y', label='Conjugate Gradient')\n","plt.plot(x, LNewton, '-g', label='Newton Method')\n","plt.plot(x, LMarqLevenburg, '-b', label='Levenberg Method')\n","plt.xlabel('X - Axis')\n","plt.ylabel('Y - Axis')\n","plt.title('Linear Approximation')\n","plt.legend()\n","plt.show()\n","#------------------------------------------------------------------------------\n"],"execution_count":43,"outputs":[{"output_type":"stream","name":"stdout","text":["Optimization terminated successfully.\n","         Current function value: 83.846251\n","         Iterations: 2\n","         Function evaluations: 5\n","         Gradient evaluations: 5\n","Optimization terminated successfully.\n","         Current function value: 83.846251\n","         Iterations: 3\n","         Function evaluations: 4\n","         Gradient evaluations: 6\n","         Hessian evaluations: 3\n","`gtol` termination condition is satisfied.\n","Function evaluations 2, initial cost 4.7802e+01, final cost 4.1923e+01, first-order optimality 4.00e-15.\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":516},"id":"p8jnAajZPu_O","executionInfo":{"status":"ok","timestamp":1636649365383,"user_tz":-180,"elapsed":1079,"user":{"displayName":"Ashish T Shivakumar Ireddy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgRJ9Hs72-OthSW0fiMcacnPbFVU5GvCjBJcPEo=s64","userId":"05364880370093993344"}},"outputId":"7ef4726d-ad38-4aa8-e9aa-aa54fc6b9379"},"source":["#------------------------------------------------------------------------------\n","#Rational Function\n","def Rational(xy):\n","  ans2 = (xy[0])/(1+xy[1]*x)\n","  return ans2\n","\n","  #Square Error\n","def RationalSQE(Rin):\n","  T3 = Rin[0]\n","  T4 = Rin[1]\n","  TT = 0\n","  for j in range(101):\n","    TT = TT + (((T3/(x[j]*T4+1))-y[j])**2)\n","  return TT\n","\n","#Gradient Error Calculation\n","def GradientRSQE(Gin):\n","  G3 = Gin[0]\n","  G4 = Gin[1]\n","  Gcalc1 = G3/(1+G4*x)\n","  G33=2*sum((Gcalc1/G3)*(Gcalc1-y))\n","  G44=2*sum((y-Gcalc1)*(Gcalc1)*(x*Gcalc1/G3))\n","  return np.asarray((G33, G44))\n","\n","#Hessian Matrix\n","def HessianRational(HRin):\n","  H3 = HRin[0]\n","  H4 = HRin[1] \n","  Hcalc1 = H3/(x*H4+1)\n","  H33 = 2*sum((Hcalc1/H3)**2)\n","  H34 = 2*sum((x)*(-2*H3+y+H4*x*y)/(1+H4*x)**3)\n","  H43 = 2*sum(((x)*(H4*x*y+y-2*H3))/(H3+H4*x)**3)\n","  H44 = 2*sum((2*H3*(x**2))*(-2*H4*x*y-2*y+3*H3)/(1+H4*x)**4)\n","  return np.asarray([[H33, H34], [H43, H44]])\n","\n","# Remainder Calculation\n","def RationalRem(Rin):\n","  return Rational(Rin) - y\n","\n","# Jacobian Matrix\n","def Rational_Matrix(RMin):\n","  RMTemp = np.empty((x.size, RMin.size))\n","  RMTemp[:,0]=1/(1+RMin[1]*x)\n","  RMTemp[:,1]=-Rational(RMin)*x/RMin[0]\n","  return RMTemp\n","#------------------------------------------------------------------------------\n","\n","# Gradient Descent Method\n","counter = 0\n","\n","RGA = 0.00001\n","Rerror = 0.0001\n","\n","AG3,AG4=1,0\n","GG3,GG4=1,1\n","\n","while GG3>Rerror and GG4> Rerror:\n","  rl = AG3/(1+AG4*x)\n","  ARTemp3 = AG3\n","  ARTemp4 = AG4\n","  R3G = GradientRSQE([AG3,AG4])[0]\n","  R4G = GradientRSQE([AG3,AG4])[1]\n","  AG3 = AG3-RGA*R3G\n","  AG4 = AG4-RGA*R4G\n","  \n","  GG3= abs(AG3-ARTemp3)\n","  GG4=abs(AG4-ARTemp4)\n","\n","  counter+=1\n","\n","GR = AG3/(1+x*AG4)\n","#------------------------------------------------------------------------------\n","\n","#------------------------------------------------------------------------------\n","#Conjugate Method\n","RC = optimize.fmin_cg(RationalSQE, Example, fprime=GradientRSQE, gtol=0.001 )\n","ConjugateGradient=Rational(RC)\n","#------------------------------------------------------------------------------\n","\n","#------------------------------------------------------------------------------\n","#Newtons Method\n","RN= optimize.minimize(RationalSQE, Example, jac=GradientRSQE, method='Newton-CG', hess = HessianRational, tol=0.001, options={'disp':True})\n","RNewton = Rational(RN.x)\n","#------------------------------------------------------------------------------\n","#------------------------------------------------------------------------------\n","#Marq Levenburg Method\n","RLM = optimize.least_squares(RationalRem, Example, jac=Rational_Matrix, method='lm',ftol=0.001, verbose = 2)\n","RMarqLevenburg = Rational(RLM.x)\n","#------------------------------------------------------------------------------\n","\n","#------------------------------------------------------------------------------\n","#Plotting\n","plt.scatter(x, y)\n","plt.plot(x, GR, '-r', label='Gradient Descent')\n","plt.plot(x, RConjugateGradient, '-y', label='Conjugate Gradient')\n","plt.plot(x, RNewton, '-g', label='Newton Method')\n","plt.plot(x, RMarqLevenburg, '-b', label='Levenberg Method')\n","plt.xlabel('X - Axis')\n","plt.ylabel('Y - Axis')\n","plt.title('Rational Approximation')\n","plt.legend()\n","plt.show()\n","#------------------------------------------------------------------------------"],"execution_count":40,"outputs":[{"output_type":"stream","name":"stdout","text":["Optimization terminated successfully.\n","         Current function value: 83.847015\n","         Iterations: 7\n","         Function evaluations: 16\n","         Gradient evaluations: 16\n","Optimization terminated successfully.\n","         Current function value: 83.851789\n","         Iterations: 31\n","         Function evaluations: 36\n","         Gradient evaluations: 66\n","         Hessian evaluations: 31\n","`ftol` termination condition is satisfied.\n","Function evaluations 7, initial cost 4.2155e+01, final cost 4.1928e+01, first-order optimality 8.63e-01.\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"ysAfRCz-4PEo"},"source":[""],"execution_count":null,"outputs":[]}]}